#!/usr/bin/python3

# Usage: python3 ramsey.py k l n
#
# Generates a boolean formula that is satisfiable when there's some
# 2-coloring of K_n that avoids a monochromatic k-clique and l-clique.
#
# See https://en.wikipedia.org/wiki/Ramsey%27s_theorem for a table of
# known Ramsey numbers; the fact that, for example, R(3,4) = 9 means
# that `ramsey.py 3 4 9` is unsatisfiable but `ramsey.py 3 4 8` is
# satisfiable.

import io
import itertools
import sys

def ramsey(k,l,n):
    clauses = []

    # Maps a sequence of vertices to a canonical edge.
    def edge(x):
        u,v = x[0],x[1]
        if u > v: return (v,u)
        return (u,v)

    buffer = io.StringIO()
    comments = io.StringIO()

    # Vars maps an edge from K_n to a variable.
    vars = {}
    var = 0
    for x in itertools.combinations(range(1,n+1), 2):
        var += 1
        vars[edge(x)] = var
        comments.write("c (%s, %s) === %s\n" % (x[0],x[1],var))

    # All k-restrictions
    for k_clique in itertools.combinations(range(1,n+1), k):
        clauses.append(
            [vars[edge(x)] for x in itertools.combinations(k_clique, 2)])

    # All l-restrictions
    for l_clique in itertools.combinations(range(1,n+1), l):
        clauses.append(
            [-vars[edge(x)] for x in itertools.combinations(l_clique, 2)])

    for c in clauses:
        buffer.write((" ".join(["{}"] * len(c)) + " 0\n").format(*c))

    return comments.getvalue() + \
        'p cnf {0} {1}\n'.format(var, len(clauses)) + \
        buffer.getvalue()

if __name__ == '__main__':
    try:
        assert(len(sys.argv) == 4)
        k = int(sys.argv[1])
        l = int(sys.argv[2])
        n = int(sys.argv[3])
        assert(k > 0)
        assert(l > 0)
        assert(n > 0)
        assert(k <= n)
        assert(l <= n)
    except:
        print('Usage: "ramsey.py k l n" for non-negative integers k, l, n')
        sys.exit(-1)
    print("c Generated by ramsey.py {0}".format(' '.join(sys.argv[1:])))
    print("c Generator source: " +
          "https://github.com/aaw/sat/blob/master/gen/ramsey.py")
    print(ramsey(k,l,n))
