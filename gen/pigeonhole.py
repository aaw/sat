#!/usr/bin/python3

# Usage: python3 pigeonhole.py p h [--break_symmetry]
#
# Generates a boolean formula that describe an assignment of p pigeons to h
# holes with no two pigeons in a hole. Satisfiable exactly when p <= h.

import argparse
import io
import itertools
import sys

def pigeonhole(p, h, break_symmetry):
    # For pigeons pp in 0..p-1 and holes hh in 0..h-1, variable
    # x = pp*h + hh + 1 represents "pigeon pp is in hole hh".
    def var(pp,hh):
        return pp*h + hh + 1

    clauses = []
    for pp in range(p):
        clause = []
        # Each pigeon p must be in some hole.
        for hh in range(h):
            clause.append(var(pp,hh))
        clauses.append(clause)

    for pp in itertools.combinations(range(p), 2):
        for hh in range(h):
            # No two pigeons can be in the same hole.
            clauses.append([-var(pp[0],hh), -var(pp[1],hh)])

    if break_symmetry:
        for j in range(1,h):
            for k in range(j+1,h):
                clauses.append([var(j-1,j), -var(j-1,k)])

    buffer = io.StringIO()
    for c in clauses:
        buffer.write((" ".join(["{}"] * len(c)) + " 0\n").format(*c))

    return 'p cnf {0} {1}\n'.format(p*h, len(clauses)) + buffer.getvalue()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Encode the pigeonhole problem as SAT")
    parser.add_argument('p', type=int, help='Number of pigeons')
    parser.add_argument('h', type=int, help='Number of pigeonholes')
    parser.add_argument('--break_symmetry', action='store_true',
                        help='Add clauses to break symmetry, speeding up UNSAT')
    parser.set_defaults(break_symmetry=False)
    args = parser.parse_args()
    assert (args.p > 0), "Number of pigeons must be greater than zero."
    assert (args.h > 0), "Number of pigeonholes must be greater than zero."

    print("c Generated by pigeonhole.py {0}".format(' '.join(sys.argv[1:])))
    print("c Generator source: " +
          "https://github.com/aaw/sat/blob/master/gen/pigeonhole.py")
    if args.p <= args.h:
        print("c label:satisfiable")
    else:
        print("c label:unsatisfiable")
    print(pigeonhole(args.p, args.h, args.break_symmetry))
