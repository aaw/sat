#!/usr/bin/python3

# Usage: python3 cook.py j k
#
# Generates the cook(j,k) clauses described in Knuth 7.2.2.2, exercise 280.
# cook(j,k) is the set of all (n choose j) positive j-clauses and (n choose k)
# negative k-clauses with n = j + k - 1.

import io
import itertools
import sys

# Returns n!
def fact(n):
    p = 1
    for i in range(1,n+1):
        p *= i
    return p

# Returns (n choose r)
def nCr(n,r):
    return int(fact(n) / (fact(r) * fact(n-r)))

def cook(j,k):
    n = j+k-1
    pvars = [x for x in range(1,n+1)]
    nvars = [-x for x in range(1,n+1)]
    buffer = io.StringIO()
    for c in itertools.combinations(pvars, j):
        buffer.write((" ".join(["{}"] * len(c)) + " 0\n").format(*c))
    for c in itertools.combinations(nvars, k):
        buffer.write((" ".join(["{}"] * len(c)) + " 0\n").format(*c))        
    return 'p cnf {0} {1}\n'.format(n, nCr(n,j) + nCr(n,k)) + buffer.getvalue()

if __name__ == '__main__':
    try:
        assert(len(sys.argv) == 3)
        j = int(sys.argv[1])
        k = int(sys.argv[2])
    except:
        print('Usage: "cook.py j k" for integer j,k')
        sys.exit(-1)
    print("c Generated by cook.py {0}".format(' '.join(sys.argv[1:])))
    print("c Generator source: github.com/aaw/sat/gen/cook.py")
    print("c label:unsatisfiable")
    print(cook(j,k))
