#!/usr/bin/python3

# Usage: python3 rand n m k [seed]
#
# Generates m k-CNF clauses from a set of n variables. Clauses are sampled
# uniformly without replacement. Clauses do not contain repeated variables.

import io
import random
import sys

# Returns -1 or 1 uniformly at random
def rsign():
    return 2*random.randint(0,1)-1

def rand(n,m,k,seed=None):
    random.seed(seed)
    buffer = io.StringIO()
    seen = set()
    while len(seen) < m:
        c = tuple(rsign() * x for x in sorted(random.sample(range(1,n+1), k)))
        if c in seen:
            continue
        buffer.write((" ".join(["{}"] * len(c)) + " 0\n").format(*c))
        seen.add(c)
    return 'p cnf {0} {1}\n'.format(n, m) + buffer.getvalue()

if __name__ == '__main__':
    try:
        assert(len(sys.argv) in [4,5])
        n = int(sys.argv[1])
        m = int(sys.argv[2])
        k = int(sys.argv[3])
        seed = None
        if len(sys.argv) == 5:
            seed = int(sys.argv[4])
    except:
        print('Usage: "rand.py n m k [seed]" for integer n,m,k')
        sys.exit(-1)
    print("c Generated by rand.py {0}".format(' '.join(sys.argv[1:])))
    print("c Generator source: github.com/aaw/sat/gen/rand.py")
    print(rand(n,m,k,seed))
