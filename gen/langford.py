#!/usr/bin/python3

# Usage: python3 langford.py n [--compressed]
#
# Generates the Langford clauses described in Knuth 7.2.2.2 (the
# specific case of n = 3 is described in (12)).
# These are satisfiable exactly when n mod 4 = 0 or 3.
# If --compressed is specified, the alternate, smaller encoding of
# Knuth's symmetric S function is used.

import io
import math
import sys

# Return triples representing options in the set cover as in (11).
# (x, y, z) means digit x is placed in slots y and z.
def options(n):
    for d in range(1, n+1):
        for i in range(1, 2*n-d):
            yield((d,i,i+d+1))

def exactly_one(x):
    clauses = [tuple(x)]
    for i in range(0, len(x)-1):
        for j in range (i+1, len(x)):
            clauses.append((-x[i],-x[j]))
    return clauses

def compressed_exactly_one(x):
    # TODO
    return x

def langford(n, compressed):
    buffer = io.StringIO()
    n_clauses = 0
    opts = [x for x in options(n)]
    clauses = []
    # Each pair of digits must be selected exactly once.
    for i in range(1, n+1):
        clauses.append(
            exactly_one([j+1 for j,x in enumerate(opts) if x[0] == i]))
    # Each index selection must be used exactly once.
    for i in range(1, 2*n+1):
        clauses.append(
            exactly_one([j+1 for j,x in enumerate(opts) if i in (x[1], x[2])]))
    clauses = set(x for sublist in clauses for x in sublist)
    for c in clauses:
        buffer.write((" ".join(["{}"] * len(c)) + " 0\n").format(*c))

    return 'p cnf {0} {1}\n'.format(len(opts), len(clauses)) + buffer.getvalue()

if __name__ == '__main__':
    try:
        assert(2 <= len(sys.argv) <= 3)
        n = int(sys.argv[1])
        assert(n > 1)
        compressed = len(sys.argv) == 3 and sys.argv[2] == '--compressed'
    except:
        print('Usage: "langford.py n [--compressed]" for integer n')
        sys.exit(-1)
    print("c Generated by langford.py {0}".format(' '.join(sys.argv[1:])))
    print("c Generator source: github.com/aaw/sat/gen/langford.py")
    if n % 4 in (0,3):
        print("c label:satisfiable")
    else:
        print("c label:unsatisfiable")
    print(langford(n, compressed))
